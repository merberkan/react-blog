{"ast":null,"code":"var _jsxFileName = \"/Users/mertberkanakdeniz/Documents/React-Youtube/dojo-blog/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  // let name = 'mario';\n  // useState kullanarak tekrardan renderlanmasını sağlıyoruz. Böylece daha reactive oluyor\n  // const [name, setName] = useState('mario');\n  // const [age, setAge] = useState(25);\n  // const [blogs, setBlogs] = useState([\n  //     {title: 'My new website', body: 'lorem ipsum...', author:'mario', id:1},\n  //     {title: 'Welcome Party', body: 'lorem ipsum...', author:'yoshi', id:2},\n  //     {title: 'Web dev top tips', body: 'lorem ipsum...', author:'mario', id:3},\n  // ]);\n  // const handleClick = () => {\n  //     name = 'luigi';\n  //     console.log(name);\n  //     setName('luigi');\n  //     setAge(30);\n  // }\n  // const handleClickAgain = (name) => {\n  //     console.log('hello'+name);\n  // }\n  // const [name, setName] = useState('mario');\n  // const handleDelete = (id) => {\n  //     // Filtreleme ile birlikte aslında silme işlemini yapıyor.\n  //     const newBlogs = blogs.filter(blog => blog.id !== id);\n  //     // Daha sonra ise hooks ile verdiğimiz fonksiyon yardımıyla yeni değeri kayıt ediyor.\n  //     setBlogs(newBlogs);\n  // }\n  // In every RENDER this function will be fired, Eğer ikinci bir parametre olarak array gönderirsek ne kadar çalışması gerektiğini,\n  // belirleyebiliriz. Örneğin, boş array koyarsak ilk sayfa açıldığında ki renderda çalışıyor. Ancak bir sonraki renderlarda,\n  // çalışmıyor.\n  const {\n    data,\n    isPending,\n    error\n  } = useFetch(\"http://localhost:8000/blogs\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 24\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }, this), data && /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: data,\n      title: \"All Blogs!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"sLyg0taNAAsO/v9xINY8i/Fy5Q0=\", false, function () {\n  return [useFetch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/mertberkanakdeniz/Documents/React-Youtube/dojo-blog/src/Home.js"],"names":["useState","useEffect","BlogList","useFetch","Home","data","isPending","error"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,SAAN;AAAgBC,IAAAA;AAAhB,MAAyBJ,QAAQ,CAAC,6BAAD,CAAvC;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eAIMI,KAAK,iBAAI;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,YAJf,EAKMD,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALnB,EAOKD,IAAI,iBAAI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,IAAjB;AAAuB,MAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CApDD;;GAAMD,I;UAmC6BD,Q;;;KAnC7BC,I;AAsDN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\nimport useFetch from \"./useFetch\";\n\nconst Home = () => {\n    // let name = 'mario';\n    // useState kullanarak tekrardan renderlanmasını sağlıyoruz. Böylece daha reactive oluyor\n    // const [name, setName] = useState('mario');\n    // const [age, setAge] = useState(25);\n    // const [blogs, setBlogs] = useState([\n    //     {title: 'My new website', body: 'lorem ipsum...', author:'mario', id:1},\n    //     {title: 'Welcome Party', body: 'lorem ipsum...', author:'yoshi', id:2},\n    //     {title: 'Web dev top tips', body: 'lorem ipsum...', author:'mario', id:3},\n    // ]);\n\n\n    // const handleClick = () => {\n    //     name = 'luigi';\n    //     console.log(name);\n    //     setName('luigi');\n    //     setAge(30);\n    // }\n\n    // const handleClickAgain = (name) => {\n    //     console.log('hello'+name);\n    // }\n\n    // const [name, setName] = useState('mario');\n\n    // const handleDelete = (id) => {\n    //     // Filtreleme ile birlikte aslında silme işlemini yapıyor.\n    //     const newBlogs = blogs.filter(blog => blog.id !== id);\n    //     // Daha sonra ise hooks ile verdiğimiz fonksiyon yardımıyla yeni değeri kayıt ediyor.\n    //     setBlogs(newBlogs);\n    // }\n    // In every RENDER this function will be fired, Eğer ikinci bir parametre olarak array gönderirsek ne kadar çalışması gerektiğini,\n    // belirleyebiliriz. Örneğin, boş array koyarsak ilk sayfa açıldığında ki renderda çalışıyor. Ancak bir sonraki renderlarda,\n    // çalışmıyor.\n\n    const {data,isPending,error} = useFetch(\"http://localhost:8000/blogs\");\n    return (\n        <div className=\"home\">\n            {/* <p>{name} is {age} years old</p> */}\n            {/* <button onClick={handleClick}>Click me</button>  */}\n            {/* <button onClick={()=> handleClickAgain('mario')}>Click me again</button> */}\n            { error && <div>{ error }</div> }\n            { isPending && <div>Loading...</div> }\n            {/* Alttaki kodda blogs olmaz ise datayı çekme süresi olduğundan bloglist.js de blogs null olarak gözüktüğünden map yapamıyor. */}\n            {data && <BlogList blogs={data} title=\"All Blogs!\"></BlogList>}\n\n\n            {/* <BlogList blogs={blogs.filter((blog) => blog.author === 'mario')} title=\"Mario's blogs\"></BlogList> */}\n            {/* <button onClick={() => setName('luigi')}>change name</button> */}\n            {/* <p>{ name }</p> */}\n        </div>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}