{"ast":null,"code":"var _jsxFileName = \"/Users/mertberkanakdeniz/Documents/React-Youtube/dojo-blog/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  // let name = 'mario';\n  // useState kullanarak tekrardan renderlanmasını sağlıyoruz. Böylece daha reactive oluyor\n  // const [name, setName] = useState('mario');\n  // const [age, setAge] = useState(25);\n  // const [blogs, setBlogs] = useState([\n  //     {title: 'My new website', body: 'lorem ipsum...', author:'mario', id:1},\n  //     {title: 'Welcome Party', body: 'lorem ipsum...', author:'yoshi', id:2},\n  //     {title: 'Web dev top tips', body: 'lorem ipsum...', author:'mario', id:3},\n  // ]);\n  // Data içindeki jsondan çekeceğiz burada o yüzden null veriyoruz\n  const [blogs, setBlogs] = useState(null);\n  const [isPending, setIsPending] = useState(true); // const handleClick = () => {\n  //     name = 'luigi';\n  //     console.log(name);\n  //     setName('luigi');\n  //     setAge(30);\n  // }\n  // const handleClickAgain = (name) => {\n  //     console.log('hello'+name);\n  // }\n\n  const [name, setName] = useState('mario'); // const handleDelete = (id) => {\n  //     // Filtreleme ile birlikte aslında silme işlemini yapıyor.\n  //     const newBlogs = blogs.filter(blog => blog.id !== id);\n  //     // Daha sonra ise hooks ile verdiğimiz fonksiyon yardımıyla yeni değeri kayıt ediyor.\n  //     setBlogs(newBlogs);\n  // }\n  // In every RENDER this function will be fired, Eğer ikinci bir parametre olarak array gönderirsek ne kadar çalışması gerektiğini,\n  // belirleyebiliriz. Örneğin, boş array koyarsak ilk sayfa açıldığında ki renderda çalışıyor. Ancak bir sonraki renderlarda,\n  // çalışmıyor.\n\n  useEffect(() => {\n    fetch('http://localhost:8000/blogs').then(res => {\n      return res.json();\n    }).then(data => {\n      setBlogs(data);\n      setIsPending(false);\n    }).catch(err => {\n      console.log(\"[ERROR]\", err.message);\n    }); // örnek olarak name parametresini verdiğimizde artık name statesi tetiklendiğinde çalışacak.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this), blogs && /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"All Blogs!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"x9fg/13/td3lwN1c93bNJDrj1YE=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/mertberkanakdeniz/Documents/React-Youtube/dojo-blog/src/Home.js"],"names":["useState","useEffect","BlogList","Home","blogs","setBlogs","isPending","setIsPending","name","setName","fetch","then","res","json","data","catch","err","console","log","message"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C,CAde,CAef;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,OAAD,CAAhC,CA1Be,CA4Bf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAHD,EAICF,IAJD,CAIOG,IAAD,IAAU;AACZT,MAAAA,QAAQ,CAACS,IAAD,CAAR;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAPD,EAQCQ,KARD,CAQQC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAG,CAACG,OAA3B;AACH,KAVD,EADY,CAYZ;AACH,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eAKMb,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALnB,EAOKF,KAAK,iBAAI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAwB,MAAA,KAAK,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAPd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CApED;;GAAMD,I;;KAAAA,I;AAsEN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\n\nconst Home = () => {\n    // let name = 'mario';\n    // useState kullanarak tekrardan renderlanmasını sağlıyoruz. Böylece daha reactive oluyor\n    // const [name, setName] = useState('mario');\n    // const [age, setAge] = useState(25);\n    // const [blogs, setBlogs] = useState([\n    //     {title: 'My new website', body: 'lorem ipsum...', author:'mario', id:1},\n    //     {title: 'Welcome Party', body: 'lorem ipsum...', author:'yoshi', id:2},\n    //     {title: 'Web dev top tips', body: 'lorem ipsum...', author:'mario', id:3},\n    // ]);\n\n    // Data içindeki jsondan çekeceğiz burada o yüzden null veriyoruz\n    const [blogs, setBlogs] = useState(null);\n\n    const [isPending, setIsPending] = useState(true);\n    // const handleClick = () => {\n    //     name = 'luigi';\n    //     console.log(name);\n    //     setName('luigi');\n    //     setAge(30);\n    // }\n\n    // const handleClickAgain = (name) => {\n    //     console.log('hello'+name);\n    // }\n\n    const [name, setName] = useState('mario');\n\n    // const handleDelete = (id) => {\n    //     // Filtreleme ile birlikte aslında silme işlemini yapıyor.\n    //     const newBlogs = blogs.filter(blog => blog.id !== id);\n    //     // Daha sonra ise hooks ile verdiğimiz fonksiyon yardımıyla yeni değeri kayıt ediyor.\n    //     setBlogs(newBlogs);\n    // }\n    // In every RENDER this function will be fired, Eğer ikinci bir parametre olarak array gönderirsek ne kadar çalışması gerektiğini,\n    // belirleyebiliriz. Örneğin, boş array koyarsak ilk sayfa açıldığında ki renderda çalışıyor. Ancak bir sonraki renderlarda,\n    // çalışmıyor.\n    useEffect(() => {\n        fetch('http://localhost:8000/blogs')\n        .then(res => {\n            return res.json();\n        })\n        .then((data) => {\n            setBlogs(data);\n            setIsPending(false);\n        })\n        .catch((err) => {\n            console.log(\"[ERROR]\", err.message);\n        })\n        // örnek olarak name parametresini verdiğimizde artık name statesi tetiklendiğinde çalışacak.\n    }, [])\n\n    return (\n        <div className=\"home\">\n            {/* <p>{name} is {age} years old</p> */}\n            {/* <button onClick={handleClick}>Click me</button>  */}\n            {/* <button onClick={()=> handleClickAgain('mario')}>Click me again</button> */}\n\n            { isPending && <div>Loading...</div> }\n            {/* Alttaki kodda blogs olmaz ise datayı çekme süresi olduğundan bloglist.js de blogs null olarak gözüktüğünden map yapamıyor. */}\n            {blogs && <BlogList blogs={blogs} title=\"All Blogs!\"></BlogList>}\n\n\n            {/* <BlogList blogs={blogs.filter((blog) => blog.author === 'mario')} title=\"Mario's blogs\"></BlogList> */}\n            {/* <button onClick={() => setName('luigi')}>change name</button> */}\n            {/* <p>{ name }</p> */}\n        </div>\n    );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}